[{"C:\\Users\\Dawid\\Desktop\\Slush-2023\\client\\src\\index.tsx":"1","C:\\Users\\Dawid\\Desktop\\Slush-2023\\client\\src\\reportWebVitals.ts":"2","C:\\Users\\Dawid\\Desktop\\Slush-2023\\client\\src\\pages\\Login\\Login.tsx":"3","C:\\Users\\Dawid\\Desktop\\Slush-2023\\client\\src\\App.tsx":"4","C:\\Users\\Dawid\\Desktop\\Slush-2023\\client\\src\\components\\privateRoutes.tsx":"5","C:\\Users\\Dawid\\Desktop\\Slush-2023\\client\\src\\pages\\Register\\Register.tsx":"6","C:\\Users\\Dawid\\Desktop\\Slush-2023\\client\\src\\pages\\Home\\Home.tsx":"7","C:\\Users\\Dawid\\Desktop\\Slush-2023\\client\\src\\pages\\Profile\\Profile.tsx":"8","C:\\Users\\Dawid\\Desktop\\copy\\Slush-2023\\client\\src\\index.tsx":"9","C:\\Users\\Dawid\\Desktop\\copy\\Slush-2023\\client\\src\\reportWebVitals.ts":"10","C:\\Users\\Dawid\\Desktop\\copy\\Slush-2023\\client\\src\\App.tsx":"11","C:\\Users\\Dawid\\Desktop\\copy\\Slush-2023\\client\\src\\components\\privateRoutes.tsx":"12","C:\\Users\\Dawid\\Desktop\\copy\\Slush-2023\\client\\src\\pages\\Login\\Login.tsx":"13","C:\\Users\\Dawid\\Desktop\\copy\\Slush-2023\\client\\src\\pages\\Home\\Home.tsx":"14","C:\\Users\\Dawid\\Desktop\\copy\\Slush-2023\\client\\src\\pages\\Register\\Register.tsx":"15","C:\\Users\\Dawid\\Desktop\\copy\\Slush-2023\\client\\src\\pages\\Profile\\Profile.tsx":"16"},{"size":437,"mtime":1675936677776,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":1675783811206,"results":"19","hashOfConfig":"18"},{"size":1492,"mtime":1675957919693,"results":"20","hashOfConfig":"18"},{"size":770,"mtime":1675956795897,"results":"21","hashOfConfig":"18"},{"size":409,"mtime":1675937224451,"results":"22","hashOfConfig":"18"},{"size":2483,"mtime":1675958183964,"results":"23","hashOfConfig":"18"},{"size":155,"mtime":1675936081217,"results":"24","hashOfConfig":"18"},{"size":564,"mtime":1675958662771,"results":"25","hashOfConfig":"18"},{"size":495,"mtime":1676034008236,"results":"26","hashOfConfig":"27"},{"size":425,"mtime":1675783811206,"results":"28","hashOfConfig":"27"},{"size":772,"mtime":1676033125091,"results":"29","hashOfConfig":"27"},{"size":357,"mtime":1675984092119,"results":"30","hashOfConfig":"27"},{"size":2016,"mtime":1676134908191,"results":"31","hashOfConfig":"27"},{"size":5616,"mtime":1676131837213,"results":"32","hashOfConfig":"27"},{"size":3007,"mtime":1676134937909,"results":"33","hashOfConfig":"27"},{"size":19743,"mtime":1676139200336,"results":"34","hashOfConfig":"27"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1t5b0k3",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"15bc526",{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"63"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"63"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"63"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},"C:\\Users\\Dawid\\Desktop\\Slush-2023\\client\\src\\index.tsx",[],[],[],"C:\\Users\\Dawid\\Desktop\\Slush-2023\\client\\src\\reportWebVitals.ts",[],[],"C:\\Users\\Dawid\\Desktop\\Slush-2023\\client\\src\\pages\\Login\\Login.tsx",[],[],"C:\\Users\\Dawid\\Desktop\\Slush-2023\\client\\src\\App.tsx",[],[],"C:\\Users\\Dawid\\Desktop\\Slush-2023\\client\\src\\components\\privateRoutes.tsx",[],[],"C:\\Users\\Dawid\\Desktop\\Slush-2023\\client\\src\\pages\\Register\\Register.tsx",["89"],[],"C:\\Users\\Dawid\\Desktop\\Slush-2023\\client\\src\\pages\\Home\\Home.tsx",[],[],"C:\\Users\\Dawid\\Desktop\\Slush-2023\\client\\src\\pages\\Profile\\Profile.tsx",["90","91","92","93","94","95"],[],"C:\\Users\\Dawid\\Desktop\\copy\\Slush-2023\\client\\src\\index.tsx",[],[],[],"C:\\Users\\Dawid\\Desktop\\copy\\Slush-2023\\client\\src\\reportWebVitals.ts",[],[],"C:\\Users\\Dawid\\Desktop\\copy\\Slush-2023\\client\\src\\App.tsx",[],[],"C:\\Users\\Dawid\\Desktop\\copy\\Slush-2023\\client\\src\\components\\privateRoutes.tsx",[],[],"C:\\Users\\Dawid\\Desktop\\copy\\Slush-2023\\client\\src\\pages\\Login\\Login.tsx",["96","97"],[],"import React, {FC, useState } from 'react';\nimport './Login.css';\nimport { useNavigate } from 'react-router-dom';\nimport toast, {Toaster} from 'react-hot-toast'\nimport { Button, ButtonGroup } from \"@chakra-ui/button\"\n\n\n\nconst Login: FC = () => {\n\n  const [email, setEmail] = useState<string>(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const navigate = useNavigate();\n\n  const handleSubmit = (event: any) => {\n    event.preventDefault();\n    fetch(\"/api/login\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ email, password }),\n    })\n      .then((res) => {\n        if (res.ok) {\n          res.json()\n          .then((e) => {\n            localStorage.setItem(\"token\", e.valueOf())\n          })\n            .then(() => navigate(\"/\"))\n        } else {\n          toast.error(\"Incorrect Username or Password\")\n        }\n      })\n      .catch((e) => {\n        console.log(e)\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={handleSubmit} className=\"LoginForm\">\n          <label style={{ \n            fontWeight: 'bolder',\n            fontSize: '32px',\n            color: 'black'\n          }}>\n            LOGIN\n          </label>\n          <div> \n          <input\n            placeholder='Email'\n            type=\"email\"\n            value={email}\n            onChange={(event) => setEmail(event.target.value)}\n          />\n          <br />\n          <input\n            placeholder='Password'\n            type=\"password\"\n            value={password}\n            onChange={(event) => setPassword(event.target.value)}\n          />\n          </div>\n        <br />\n        <a onClick={() => navigate(\"/Register\")} style={{ cursor: 'pointer', display: 'flex', alignSelf: \"center\" }}><u> Create Account  <b> Here</b> </u></a>\n        <Button colorScheme={'facebook'} size=\"lg\" style={{alignSelf: \"center\", minWidth: \"10vw\"}} type=\"submit\">Log In</Button>\n      </form>\n      <Toaster />\n    </div>\n  );\n}\n\nexport default Login;\n","C:\\Users\\Dawid\\Desktop\\copy\\Slush-2023\\client\\src\\pages\\Home\\Home.tsx",["98","99"],[],"import React, { useState, useEffect } from 'react'\r\nimport './Home.css'\r\nimport { Button, ButtonGroup } from \"@chakra-ui/button\"\r\nimport ReactPaginate from 'react-paginate';\r\nimport home from '../../assets/home.png'\r\nimport user from '../../assets/user.png'\r\nimport toast, { Toaster } from 'react-hot-toast'\r\nimport Popup from 'reactjs-popup';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport 'reactjs-popup/dist/index.css';\r\n\r\nconst Home: React.FC = () => {\r\n\r\n    const navigate = useNavigate();\r\n    const [exercises, setExercises] = useState([{\r\n        username: \"\", name: \"\", description: \"\"\r\n    }]);\r\n    const [loading, setLoading] = useState(true)\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n    const PER_PAGE = 4\r\n    const offset = currentPage * PER_PAGE;\r\n    const pageCount = Math.ceil(exercises.length / PER_PAGE);\r\n\r\n    function handlePageClick({ selected }: { selected: number }) {\r\n        setCurrentPage(selected);\r\n    }\r\n\r\n    function dismissToast() {\r\n        toast.dismiss();\r\n    }\r\n\r\n    function showToastWithButton(message: any) {\r\n        const MyToast = (\r\n            <div className='Toast'>\r\n                <p>{message}</p>\r\n                <Button size={'sm'} colorScheme=\"red\" onClick={dismissToast} style={{ alignSelf: 'center'}}>Dismiss</Button>\r\n            </div>\r\n\r\n        );\r\n        toast(MyToast, {\r\n            duration: Infinity,\r\n            style: {\r\n                display: 'flex',\r\n                justifySelf: 'center',\r\n                minWidth: '80vw',\r\n                minHeight: '40vh'\r\n            }\r\n        });\r\n    }\r\n\r\n    const fetchSharedExercises = async (): Promise<any> =>{\r\n\r\n        try {\r\n            const data = await fetch(\"/api/GetSharedExercises\", {\r\n                method: \"POST\",\r\n            })\r\n            const response = await data.text()\r\n            if (response.valueOf() !== \"[]\") {\r\n                const e = JSON.parse(response.valueOf())\r\n                setExercises(e)\r\n            }\r\n            setLoading(false)\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        fetchSharedExercises();\r\n    }, [])\r\n\r\n    const signOut = () => {\r\n        localStorage.clear();\r\n        return window.location.reload();\r\n    }\r\n\r\n    return (\r\n        loading ?\r\n            <div>\r\n                Loading\r\n            </div>\r\n            :\r\n\r\n        <div className='HomePage'>\r\n\r\n            <div className='HomeMenu'>\r\n                <Button colorScheme={\"white\"} style={{ marginBottom: '20%' }} onClick={() => navigate(\"/\")}><img src={home} alt=\"home icon\" /> </Button>\r\n                <Button colorScheme={\"white\"} onClick={() => navigate(\"/Profile\")}><img src={user} alt=\"user icon\" /></Button>\r\n            </div>\r\n            <div className='HomeMain'>\r\n                <div className='HomeTop'>\r\n                    <div className='HomeTopLeft'>\r\n                        <h1> Welcome To Slush 2023 Task Management Platform !</h1>\r\n                            <h2 style={{ fontWeight:'700', borderBottom: \"1px solid white\"}}> SHARED ASSIGNMENTS: </h2>\r\n                    </div>\r\n                    <div className='HomeTopRight'>\r\n                        <Button size={\"lg\"} colorScheme=\"yellow\" onClick={() => signOut()}>Sign Out</Button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className='HomeBottom'>\r\n                    <div className='HomeBottomLeft'>\r\n                            <div className='HomeBottomLeftTasks'>\r\n                                {\r\n                                exercises.length !== 0 && exercises[0].username !== \"\" ? \r\n                                Object.entries(exercises).slice(offset, offset + PER_PAGE)\r\n                                    .map(([key, value]) => {\r\n                                        return (\r\n                                            <div key={key} className=\"HomeTask\">\r\n                                                <Button colorScheme={'linkedin'} size=\"lg\" className='taskButtons' key={key} onClick={() => showToastWithButton(value.description)\r\n                                                } style={{\r\n                                                    height:\"12vh\"\r\n                                                }}> BY : {value.username} <br /> {value.name} </Button>\r\n                                            </div>\r\n                                        );\r\n                                    })\r\n                                    :\r\n                                    <div className='HomeTask'>\r\n                                    </div>\r\n                                    }\r\n                            </div>\r\n                            <ReactPaginate\r\n                                previousLabel={\"\"}\r\n                                nextLabel={\"\"}\r\n                                pageCount={pageCount}\r\n                                onPageChange={handlePageClick}\r\n                                containerClassName={\"pagination\"}\r\n                                previousLinkClassName={\"pagination__link\"}\r\n                                nextLinkClassName={\"pagination__link\"}\r\n                                disabledClassName={\"pagination__link__disabled\"}\r\n                                activeClassName={\"pagination__link--active\"}\r\n                            />\r\n                    </div>\r\n                    <div className='HomeBottomRight'>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>   \r\n            <Toaster /> \r\n        </div>\r\n    )\r\n}\r\nexport default Home","C:\\Users\\Dawid\\Desktop\\copy\\Slush-2023\\client\\src\\pages\\Register\\Register.tsx",["100","101","102"],[],"import React, { useState } from 'react'\r\nimport { NavigateFunction, useNavigate } from 'react-router-dom';\r\nimport toast, { Toaster } from 'react-hot-toast'\r\nimport { Button, ButtonGroup } from \"@chakra-ui/button\"\r\nimport './Register.css'\r\nconst  Register: React.FC = () => {\r\n\r\n\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [username, setUsername] = useState(\"\");\r\n    \r\n    const navigate: NavigateFunction = useNavigate();\r\n\r\n    const handleSubmit = (event: any) => {\r\n\r\n        event.preventDefault();\r\n\r\n        fetch(\"/api/register\", {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({ email, username, password }),\r\n        })\r\n            .then((res) => {\r\n                if (res.ok) {\r\n                    const token = res.json();\r\n                    localStorage.setItem(\"token\", token.toString())\r\n                    navigate(\"/Login\")\r\n\r\n                } else {\r\n                   const error = res.text()\r\n                   .then((e) => {\r\n                    toast.error(e.valueOf())}\r\n                    )\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                console.log(e)\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className='App'>\r\n            <form onSubmit={handleSubmit} className='RegForm'>\r\n                <label style={{\r\n                    fontWeight: 'bolder',\r\n                    fontSize: '32px',\r\n                    color: 'black'\r\n                }}>\r\n                    CREATE ACCOUNT\r\n                </label>\r\n                    <input\r\n                        type=\"email\"\r\n                        placeholder='Email'\r\n                        value={email}\r\n                        onChange={(event) => setEmail(event.target.value)}\r\n                        required\r\n                    />\r\n\r\n                <br />\r\n\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder='Username'\r\n                        value={username}\r\n                        onChange={(event) => setUsername(event.target.value)}\r\n                        required\r\n                    />\r\n\r\n                <br />\r\n\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder='Password'\r\n                        value={password}\r\n                        onChange={(event) => setPassword(event.target.value)}\r\n                        required\r\n                    />\r\n\r\n                <br />\r\n                <a onClick={() => navigate(\"/Login\")} style={{ cursor: 'pointer', display: 'flex', alignSelf: \"center\" }}> <u>Already Have An Account ? Click<b> Here </b> </u></a>\r\n                <Button colorScheme={'facebook'} size=\"lg\" style={{ alignSelf: \"center\", minWidth: \"10vw\" }} type=\"submit\">Submit</Button>\r\n            </form>\r\n            <Toaster/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register","C:\\Users\\Dawid\\Desktop\\copy\\Slush-2023\\client\\src\\pages\\Profile\\Profile.tsx",["103"],[],"import React, { useEffect, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './Profile.css'\r\nimport ReactPaginate from 'react-paginate';\r\nimport { Button, ButtonGroup } from \"@chakra-ui/button\"\r\nimport NoteBook from '../../assets/NoteBook.png'\r\nimport Share from '../../assets/share.png'\r\nimport toast, { Toaster } from 'react-hot-toast'\r\nimport home from '../../assets/home.png'\r\nimport user from '../../assets/user.png'\r\nimport Popup from 'reactjs-popup';\r\nimport 'reactjs-popup/dist/index.css';\r\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\r\nimport 'react-tabs/style/react-tabs.css';\r\n\r\n\r\nconst Profile: React.FC = () => {\r\n\r\n\r\n    \r\n    const [username, setUsername] = useState(\"\");\r\n    const [exercises, setExercises] = useState([{\r\n        name: \"\", description: \"\"\r\n    }]);\r\n    const [name, setName] = useState(\"\");\r\n    const [modifiedName, setModifiedName] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [modifiedDescription, setModifiedDescription] = useState(\"\");\r\n    const [selectedOption, setSelectedOption] = useState(\"\");\r\n    const [task_name, setTask_name] = useState(\"\");\r\n    const [sharedExercises, setsharedExercises] = useState([{\r\n        name: \"\", description: \"\"\r\n    }])\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n    const PER_PAGE = 3\r\n    const offset = currentPage * PER_PAGE;\r\n    const pageCount = Math.ceil(exercises.length / PER_PAGE);\r\n    const sharedPageCount = Math.ceil(sharedExercises.length / PER_PAGE);\r\n    \r\n    function handlePageClick({ selected }: { selected: number }) {\r\n        setCurrentPage(selected);\r\n    }\r\n\r\n    function dismissToast() {\r\n        toast.dismiss();\r\n    }\r\n\r\n    function showToastWithButton(message: any) {\r\n        const MyToast = (\r\n            <div className='Toast'>\r\n                <p>{message}</p>\r\n                <Button size={'sm'} colorScheme=\"red\" onClick={dismissToast} style={{ alignSelf: 'center' }}>Dismiss</Button>\r\n            </div>\r\n            \r\n        );\r\n        toast(MyToast, {\r\n            duration: Infinity,\r\n            style: {\r\n                display: 'flex',\r\n                justifySelf: 'center',\r\n                minWidth: '80vw',\r\n                minHeight: '40vh'\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n    const fetchData_Username = async (): Promise<void> => {\r\n\r\n        const token = await localStorage.getItem(\"token\")\r\n\r\n        try {\r\n            const data = await fetch(\"/api/GetUsername\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ token }),\r\n            })\r\n            await data.text()\r\n            .then((e) => {\r\n                setUsername(e.valueOf())\r\n            })\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n            navigate(\"/Login\")\r\n        }\r\n    }\r\n\r\n    const fetchData_Exercises = async (): Promise<any> => {\r\n\r\n        const token = await localStorage.getItem(\"token\")\r\n\r\n\r\n        try {\r\n            const data = await fetch(\"/api/GetExercises\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ token }),\r\n            })\r\n            const response = await data.text()\r\n            if(response.valueOf() !== \"[]\"){\r\n                const e = JSON.parse(response.valueOf())\r\n                setExercises(e)\r\n            }\r\n            setLoading(false)\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n\r\n    }\r\n    const fetchData_SharedExercises = async (): Promise<any> => {\r\n\r\n        const token = await localStorage.getItem(\"token\")\r\n\r\n\r\n        try {\r\n            const data = await fetch(\"/api/GetUserSharedExercises\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ token }),\r\n            })\r\n            const response = await data.text()\r\n            if (response.valueOf() !== \"[]\") {\r\n                const e = JSON.parse(response.valueOf())\r\n                setsharedExercises(e)\r\n            }\r\n            setLoading(false)\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData_Username()\r\n        .then( () => fetchData_Exercises())\r\n        .then( () => fetchData_SharedExercises())\r\n    }, [])\r\n\r\n    const handleShare = async (event: any) => {\r\n        event.preventDefault();\r\n        try\r\n        {\r\n            await fetch(\"/api/shareTask\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ selectedOption, username }),\r\n            })\r\n\r\n            return window.location.reload();\r\n        }\r\n        catch(e){\r\n            \r\n        }\r\n\r\n    }\r\n    const handleStopSharing = async (valueName: any) => {\r\n\r\n        await fetch(\"/api/StopSharing\", {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({ valueName, username }),\r\n        })\r\n\r\n        return window.location.reload();\r\n    }\r\n\r\n    const handleSubmit_Add = async (event: any) => {\r\n        event.preventDefault();\r\n\r\n        await fetch(\"/api/saveTask\", {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({ name, description, username }),\r\n        })\r\n        \r\n        return window.location.reload();\r\n    }\r\n    const handleModify = async (event: any) => {\r\n\r\n        event.preventDefault()\r\n        \r\n            await fetch(\"/api/modifyTask\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ modifiedName, modifiedDescription, task_name, username }),\r\n            })\r\n\r\n            return window.location.reload();\r\n    }\r\n    const handleDelete = async (valueName: any) => {\r\n\r\n        await fetch(\"/api/DeleteTask\", {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({valueName, username}),\r\n        })\r\n\r\n        return window.location.reload();\r\n\r\n    }\r\n\r\n    const weekday = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n    const monthShortNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n    const date = new Date();\r\n\r\n    return (\r\n        isLoading ? \r\n        <div>\r\n            Loading\r\n        </div>  \r\n        :\r\n        <div className='profilePage'>\r\n                \r\n                <div className='profileMenu'>\r\n                    <Button colorScheme={\"white\"} style={{ marginBottom: '20%' }} onClick={() => navigate(\"/\")}><img src={home} alt=\"home icon\" /> </Button>\r\n                    <Button colorScheme={\"white\"} onClick={() => navigate(\"/Profile\") }><img src={user} alt=\"user icon\" /></Button>\r\n                </div>\r\n                <div className='profileMain'>\r\n\r\n                    <div className='profileTopContainer'>\r\n\r\n                        <div className='profileTopContainer-left'>\r\n                            <p> {monthShortNames[date.getMonth()]} {date.getDate()},{date.getFullYear()} {weekday[date.getDay()]}</p>\r\n                            <div className='profile-welcome-text'>\r\n                                <h2 style={{ fontSize: \"calc(0.7vw + 1.7vh + 1.1vmin)\"}}>My Workspace</h2>\r\n                                <p style={{ color: \"grey\" }}>welcome {username} you look great today!</p>\r\n                            </div>\r\n                                <ButtonGroup id='profile-buttons-div'>\r\n                                <Popup trigger={<Button id='profile-button' leftIcon={<img src={NoteBook} alt='Add Task Icon' className='icon' />}>Add Task</Button> } modal>   \r\n\r\n                                    <form onSubmit={handleSubmit_Add} className='form'>\r\n                                        <label>\r\n                                            Name:\r\n                                        </label>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                value={name}\r\n                                                onChange={(event) => setName(event.target.value)}\r\n                                                required\r\n                                            />\r\n                                        <br />\r\n                                        <label>\r\n                                            Description:\r\n                                        </label>\r\n                                            <textarea\r\n                                                value={description}\r\n                                                onChange={(event) => setDescription(event.target.value)}\r\n                                                required\r\n                                            />\r\n                                        <br />\r\n                                        <Button colorScheme={'green'} size={'lg'} style={{ alignSelf: 'center', marginTop: \"3%\", fontSize: \"1.5em\" }} type=\"submit\">Submit</Button>\r\n                                    </form>\r\n                                \r\n                                 </Popup>\r\n                                <Popup trigger={<Button  id='profile-button' leftIcon={<img src={Share} alt=\"Share Icon\" className='icon' />}>Share</Button>} modal>\r\n\r\n                                    <form onSubmit={handleShare} className=\"shareForm\">\r\n                                        <label>\r\n                                            Which one would you like to share: \r\n                                        </label>\r\n                                            <select value={selectedOption} onChange={e => setSelectedOption(e.target.value)}>\r\n                                            <option>Please Select The Task You Want To Share</option>\r\n                                                {exercises.map(option => (\r\n                                                    <option  value={option.name}>\r\n                                                        {option.name}\r\n                                                    </option>\r\n                                                ))}\r\n                                            </select>\r\n                                        <Button type=\"submit\" size={'lg'} style={{alignSelf: \"center\", fontSize: \"1.5em\"}} colorScheme=\"green\">Share</Button>\r\n                                    </form>\r\n\r\n                                </Popup>\r\n                                </ButtonGroup>\r\n                        \r\n                        </div>\r\n\r\n                        <div className='profileTopContainer-right'>\r\n                            <p>@{username}</p>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div className='profileBottomContainer'>\r\n                        <div className='profileBottomContainer-left'>\r\n                            <Tabs style={{minHeight: '400px'}}> \r\n                                <TabList>\r\n                                    <Tab> <h1 className='profileBottomContainer-left-text'>Your Assignments</h1> </Tab>\r\n                                    <Tab> <h1 className='profileBottomContainer-left-text'>Shared Assignments</h1> </Tab>\r\n                                </TabList>\r\n                            <TabPanel>\r\n                                <div className='profileBottomContainer-left-tasks'>\r\n                                    {\r\n                                        exercises.length !== 0 && exercises[0].name !== \"\" ?\r\n                                            Object.entries(exercises).slice(offset, offset + PER_PAGE)\r\n                                                .map(([key, value]) => {\r\n                                                    return (\r\n                                                        <div key={key}>\r\n                                                            <Button colorScheme={'whatsapp'} size=\"lg\" className='taskButtons' onClick={() => showToastWithButton(value.description)\r\n                                                            }>{value.name}</Button>\r\n                                                            <div className='modify-delete-buttons-div'>\r\n                                                                <Button size={'xs'} colorScheme='red' onClick={() => handleDelete(value.name)}>DELETE</Button>\r\n                                                                <Popup trigger={<Button size={'xs'} colorScheme='yellow' onClickCapture={() => {\r\n                                                                    setModifiedDescription(value.description)\r\n                                                                    setModifiedName(value.name)\r\n                                                                    setTask_name(value.name)\r\n                                                                }\r\n                                                                }>MODIFY</Button>} modal>\r\n                                                                    <form onSubmit={\r\n                                                                        handleModify} className='form'>\r\n                                                                        <label>\r\n                                                                            Name:\r\n                                                                        </label>\r\n                                                                        <input\r\n                                                                            type=\"text\"\r\n                                                                            value={modifiedName}\r\n                                                                            onChange={(event) => setModifiedName(event.target.value)}\r\n                                                                            required\r\n                                                                        />\r\n                                                                        <br />\r\n                                                                        <label>\r\n                                                                            Description:\r\n                                                                        </label>\r\n                                                                        <textarea\r\n                                                                            value={modifiedDescription}\r\n                                                                            onChange={(event) => setModifiedDescription(event.target.value)}\r\n                                                                            required\r\n                                                                        />\r\n                                                                        <br />\r\n                                                                        <Button colorScheme={'green'} size={'lg'} style={{ alignSelf: 'center', marginTop: \"3%\", fontSize: \"1.5em\" }} type=\"submit\">Submit</Button>\r\n                                                                    </form>\r\n                                                                </Popup>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    );\r\n                                                })\r\n                                            :\r\n                                            <div>\r\n\r\n                                            </div>\r\n                                    }\r\n                                </div>\r\n                                <ReactPaginate\r\n                                    previousLabel={\"\"}\r\n                                    nextLabel={\"\"}\r\n                                    pageCount={pageCount}\r\n                                    onPageChange={handlePageClick}\r\n                                    containerClassName={\"pagination\"}\r\n                                    previousLinkClassName={\"pagination__link\"}\r\n                                    nextLinkClassName={\"pagination__link\"}\r\n                                    disabledClassName={\"pagination__link__disabled\"}\r\n                                    activeClassName={\"pagination__link--active\"}\r\n                                />\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                                    <div className='profileBottomContainer-left-tasks'>\r\n                                        {\r\n                                            sharedExercises.length !== 0 && sharedExercises[0].name !== \"\" ?\r\n                                                Object.entries(sharedExercises).slice(offset, offset + PER_PAGE)\r\n                                                    .map(([key, value]) => {\r\n                                                        return (\r\n                                                            <div key={key}>\r\n                                                                <Button colorScheme={'whatsapp'} size=\"lg\" className='taskButtons' onClick={() => showToastWithButton(value.description)\r\n                                                                }>{value.name}</Button>\r\n                                                                <div className='modify-delete-buttons-div'>\r\n                                                                    <Button size={'xs'} colorScheme='red' onClick={() => handleStopSharing(value.name)}>Stop Sharing</Button>              \r\n                                                                </div>\r\n                                                            </div>\r\n                                                        );\r\n                                                    })\r\n                                                :\r\n                                                <div>\r\n\r\n                                                </div>\r\n                                        }\r\n                                    </div>\r\n                                    <ReactPaginate\r\n                                        previousLabel={\"\"}\r\n                                        nextLabel={\"\"}\r\n                                        pageCount={sharedPageCount}\r\n                                        onPageChange={handlePageClick}\r\n                                        containerClassName={\"pagination\"}\r\n                                        previousLinkClassName={\"pagination__link\"}\r\n                                        nextLinkClassName={\"pagination__link\"}\r\n                                        disabledClassName={\"pagination__link__disabled\"}\r\n                                        activeClassName={\"pagination__link--active\"}\r\n                                    />\r\n                            </TabPanel>\r\n                        </Tabs>\r\n                        </div>\r\n                        <div className='profileBottomContainer-right'>\r\n                            \r\n                        </div>\r\n                    </div>\r\n                    <Toaster />\r\n                </div>\r\n        </div>\r\n\r\n    )\r\n    \r\n}\r\nexport default Profile",{"ruleId":"104","severity":1,"message":"105","line":30,"column":26,"nodeType":"106","messageId":"107","endLine":30,"endColumn":31},{"ruleId":"104","severity":1,"message":"108","line":5,"column":12,"nodeType":"106","messageId":"107","endLine":5,"endColumn":20},{"ruleId":"104","severity":1,"message":"109","line":5,"column":22,"nodeType":"106","messageId":"107","endLine":5,"endColumn":33},{"ruleId":"104","severity":1,"message":"110","line":6,"column":12,"nodeType":"106","messageId":"107","endLine":6,"endColumn":21},{"ruleId":"104","severity":1,"message":"111","line":6,"column":23,"nodeType":"106","messageId":"107","endLine":6,"endColumn":35},{"ruleId":"104","severity":1,"message":"112","line":10,"column":15,"nodeType":"106","messageId":"107","endLine":10,"endColumn":24},{"ruleId":"104","severity":1,"message":"113","line":13,"column":23,"nodeType":"106","messageId":"107","endLine":13,"endColumn":27},{"ruleId":"104","severity":1,"message":"114","line":5,"column":18,"nodeType":"106","messageId":"107","endLine":5,"endColumn":29},{"ruleId":"115","severity":1,"message":"116","line":65,"column":9,"nodeType":"117","endLine":65,"endColumn":118},{"ruleId":"104","severity":1,"message":"114","line":3,"column":18,"nodeType":"106","messageId":"107","endLine":3,"endColumn":29},{"ruleId":"104","severity":1,"message":"118","line":8,"column":8,"nodeType":"106","messageId":"107","endLine":8,"endColumn":13},{"ruleId":"104","severity":1,"message":"114","line":4,"column":18,"nodeType":"106","messageId":"107","endLine":4,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":31,"column":26,"nodeType":"106","messageId":"107","endLine":31,"endColumn":31},{"ruleId":"115","severity":1,"message":"116","line":81,"column":17,"nodeType":"117","endLine":81,"endColumn":123},{"ruleId":"119","severity":1,"message":"120","line":145,"column":8,"nodeType":"121","endLine":145,"endColumn":10,"suggestions":"122"},"@typescript-eslint/no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'username' is assigned a value but never used.","'setUsername' is assigned a value but never used.","'exercises' is assigned a value but never used.","'setExercises' is assigned a value but never used.","'fetchData' is assigned a value but never used.","'data' is assigned a value but never used.","'ButtonGroup' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Popup' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData_Username'. Either include it or remove the dependency array.","ArrayExpression",["123"],{"desc":"124","fix":"125"},"Update the dependencies array to be: [fetchData_Username]",{"range":"126","text":"127"},[4542,4544],"[fetchData_Username]"]